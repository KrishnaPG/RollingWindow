// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RollingWindow.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// RollingBeta
NumericVector RollingBeta(const NumericVector& x, const NumericVector& y, int window, bool pop, bool expanding);
static SEXP RollingWindow_RollingBeta_try(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type pop(popSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingBeta(x, y, window, pop, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingBeta(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingBeta_try(xSEXP, ySEXP, windowSEXP, popSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingCompound
NumericMatrix RollingCompound(const SEXP& x, int window, long double scale, bool expanding);
static SEXP RollingWindow_RollingCompound_try(SEXP xSEXP, SEXP windowSEXP, SEXP scaleSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< long double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingCompound(x, window, scale, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingCompound(SEXP xSEXP, SEXP windowSEXP, SEXP scaleSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingCompound_try(xSEXP, windowSEXP, scaleSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingCov
NumericVector RollingCov(const NumericVector& x, const NumericVector& y, int window, bool pop, bool expanding);
static SEXP RollingWindow_RollingCov_try(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type pop(popSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingCov(x, y, window, pop, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingCov(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingCov_try(xSEXP, ySEXP, windowSEXP, popSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingCorr
NumericVector RollingCorr(const NumericVector& x, const NumericVector& y, int window, bool pop, bool expanding);
static SEXP RollingWindow_RollingCorr_try(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type pop(popSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingCorr(x, y, window, pop, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingCorr(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingCorr_try(xSEXP, ySEXP, windowSEXP, popSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingKurt
NumericMatrix RollingKurt(const SEXP& x, int window, bool pop, bool expanding);
static SEXP RollingWindow_RollingKurt_try(SEXP xSEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type pop(popSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingKurt(x, window, pop, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingKurt(SEXP xSEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingKurt_try(xSEXP, windowSEXP, popSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingMax
NumericMatrix RollingMax(const SEXP& x, int window, bool expanding);
static SEXP RollingWindow_RollingMax_try(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingMax(x, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingMax(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingMax_try(xSEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingMean
NumericMatrix RollingMean(const SEXP& x, int window, bool expanding);
static SEXP RollingWindow_RollingMean_try(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingMean(x, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingMean(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingMean_try(xSEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingMAE
NumericVector RollingMAE(const NumericVector& x, const NumericVector& y, int window, bool expanding);
static SEXP RollingWindow_RollingMAE_try(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingMAE(x, y, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingMAE(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingMAE_try(xSEXP, ySEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingMS
NumericVector RollingMS(const SEXP& x, int window, bool expanding);
static SEXP RollingWindow_RollingMS_try(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingMS(x, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingMS(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingMS_try(xSEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingMSE
NumericVector RollingMSE(const NumericVector& x, const NumericVector& y, int window, bool expanding);
static SEXP RollingWindow_RollingMSE_try(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingMSE(x, y, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingMSE(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingMSE_try(xSEXP, ySEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingMedian
NumericMatrix RollingMedian(const SEXP& x, int window, bool expanding);
static SEXP RollingWindow_RollingMedian_try(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingMedian(x, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingMedian(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingMedian_try(xSEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingMin
NumericMatrix RollingMin(const SEXP& x, int window, bool expanding);
static SEXP RollingWindow_RollingMin_try(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingMin(x, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingMin(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingMin_try(xSEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingProd
NumericMatrix RollingProd(const SEXP& x, int window, bool expanding);
static SEXP RollingWindow_RollingProd_try(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingProd(x, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingProd(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingProd_try(xSEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingRMSE
NumericVector RollingRMSE(const NumericVector& x, const NumericVector& y, int window, bool expanding);
static SEXP RollingWindow_RollingRMSE_try(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingRMSE(x, y, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingRMSE(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingRMSE_try(xSEXP, ySEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingSkew
NumericMatrix RollingSkew(const SEXP& x, int window, bool pop, bool expanding);
static SEXP RollingWindow_RollingSkew_try(SEXP xSEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type pop(popSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingSkew(x, window, pop, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingSkew(SEXP xSEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingSkew_try(xSEXP, windowSEXP, popSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingStd
NumericMatrix RollingStd(const SEXP& x, int window, bool pop, bool expanding);
static SEXP RollingWindow_RollingStd_try(SEXP xSEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type pop(popSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingStd(x, window, pop, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingStd(SEXP xSEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingStd_try(xSEXP, windowSEXP, popSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingSum
NumericMatrix RollingSum(const SEXP& x, int window, bool expanding);
static SEXP RollingWindow_RollingSum_try(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingSum(x, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingSum(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingSum_try(xSEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingSumprod
NumericVector RollingSumprod(const NumericVector& x, const NumericVector& y, int window, bool expanding);
static SEXP RollingWindow_RollingSumprod_try(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingSumprod(x, y, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingSumprod(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingSumprod_try(xSEXP, ySEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingSS
NumericVector RollingSS(const NumericVector& x, int window, bool expanding);
static SEXP RollingWindow_RollingSS_try(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingSS(x, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingSS(SEXP xSEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingSS_try(xSEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingSSE
NumericVector RollingSSE(const NumericVector& x, const NumericVector& y, int window, bool expanding);
static SEXP RollingWindow_RollingSSE_try(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingSSE(x, y, window, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingSSE(SEXP xSEXP, SEXP ySEXP, SEXP windowSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingSSE_try(xSEXP, ySEXP, windowSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingVar
NumericMatrix RollingVar(const SEXP& x, int window, bool pop, bool expanding);
static SEXP RollingWindow_RollingVar_try(SEXP xSEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type pop(popSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingVar(x, window, pop, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingVar(SEXP xSEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingVar_try(xSEXP, windowSEXP, popSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// RollingZscore
NumericMatrix RollingZscore(const SEXP& x, int window, bool pop, bool expanding);
static SEXP RollingWindow_RollingZscore_try(SEXP xSEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< bool >::type pop(popSEXP);
    Rcpp::traits::input_parameter< bool >::type expanding(expandingSEXP);
    __result = Rcpp::wrap(RollingZscore(x, window, pop, expanding));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RollingWindow_RollingZscore(SEXP xSEXP, SEXP windowSEXP, SEXP popSEXP, SEXP expandingSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RollingWindow_RollingZscore_try(xSEXP, windowSEXP, popSEXP, expandingSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int RollingWindow_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("NumericVector(*RollingBeta)(const NumericVector&,const NumericVector&,int,bool,bool)");
        signatures.insert("NumericMatrix(*RollingCompound)(const SEXP&,int,long double,bool)");
        signatures.insert("NumericVector(*RollingCov)(const NumericVector&,const NumericVector&,int,bool,bool)");
        signatures.insert("NumericVector(*RollingCorr)(const NumericVector&,const NumericVector&,int,bool,bool)");
        signatures.insert("NumericMatrix(*RollingKurt)(const SEXP&,int,bool,bool)");
        signatures.insert("NumericMatrix(*RollingMax)(const SEXP&,int,bool)");
        signatures.insert("NumericMatrix(*RollingMean)(const SEXP&,int,bool)");
        signatures.insert("NumericVector(*RollingMAE)(const NumericVector&,const NumericVector&,int,bool)");
        signatures.insert("NumericVector(*RollingMS)(const SEXP&,int,bool)");
        signatures.insert("NumericVector(*RollingMSE)(const NumericVector&,const NumericVector&,int,bool)");
        signatures.insert("NumericMatrix(*RollingMedian)(const SEXP&,int,bool)");
        signatures.insert("NumericMatrix(*RollingMin)(const SEXP&,int,bool)");
        signatures.insert("NumericMatrix(*RollingProd)(const SEXP&,int,bool)");
        signatures.insert("NumericVector(*RollingRMSE)(const NumericVector&,const NumericVector&,int,bool)");
        signatures.insert("NumericMatrix(*RollingSkew)(const SEXP&,int,bool,bool)");
        signatures.insert("NumericMatrix(*RollingStd)(const SEXP&,int,bool,bool)");
        signatures.insert("NumericMatrix(*RollingSum)(const SEXP&,int,bool)");
        signatures.insert("NumericVector(*RollingSumprod)(const NumericVector&,const NumericVector&,int,bool)");
        signatures.insert("NumericVector(*RollingSS)(const NumericVector&,int,bool)");
        signatures.insert("NumericVector(*RollingSSE)(const NumericVector&,const NumericVector&,int,bool)");
        signatures.insert("NumericMatrix(*RollingVar)(const SEXP&,int,bool,bool)");
        signatures.insert("NumericMatrix(*RollingZscore)(const SEXP&,int,bool,bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP RollingWindow_RcppExport_registerCCallable() { 
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingBeta", (DL_FUNC)RollingWindow_RollingBeta_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingCompound", (DL_FUNC)RollingWindow_RollingCompound_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingCov", (DL_FUNC)RollingWindow_RollingCov_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingCorr", (DL_FUNC)RollingWindow_RollingCorr_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingKurt", (DL_FUNC)RollingWindow_RollingKurt_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingMax", (DL_FUNC)RollingWindow_RollingMax_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingMean", (DL_FUNC)RollingWindow_RollingMean_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingMAE", (DL_FUNC)RollingWindow_RollingMAE_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingMS", (DL_FUNC)RollingWindow_RollingMS_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingMSE", (DL_FUNC)RollingWindow_RollingMSE_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingMedian", (DL_FUNC)RollingWindow_RollingMedian_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingMin", (DL_FUNC)RollingWindow_RollingMin_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingProd", (DL_FUNC)RollingWindow_RollingProd_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingRMSE", (DL_FUNC)RollingWindow_RollingRMSE_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingSkew", (DL_FUNC)RollingWindow_RollingSkew_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingStd", (DL_FUNC)RollingWindow_RollingStd_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingSum", (DL_FUNC)RollingWindow_RollingSum_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingSumprod", (DL_FUNC)RollingWindow_RollingSumprod_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingSS", (DL_FUNC)RollingWindow_RollingSS_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingSSE", (DL_FUNC)RollingWindow_RollingSSE_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingVar", (DL_FUNC)RollingWindow_RollingVar_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RollingZscore", (DL_FUNC)RollingWindow_RollingZscore_try);
    R_RegisterCCallable("RollingWindow", "RollingWindow_RcppExport_validate", (DL_FUNC)RollingWindow_RcppExport_validate);
    return R_NilValue;
}
